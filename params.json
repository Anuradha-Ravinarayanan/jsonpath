{"name":"Jsonpath","body":"# JsonPath\r\n\r\nThis is an implementation of http://goessner.net/articles/JsonPath/.\r\n\r\n## What is JsonPath?\r\n\r\nJsonPath is a way of addressing elements within a JSON object. Similar to xpath of yore, JsonPath lets you\r\ntraverse a json object and manipulate or access it.\r\n\r\n## Usage\r\n\r\n### Command-line\r\n\r\nThere is stand-alone usage through the binary `jsonpath`\r\n\r\n    jsonpath [expression] (file|string)\r\n\r\n    If you omit the second argument, it will read stdin, assuming one valid JSON object\r\n    per line. Expression must be a valid jsonpath expression.\r\n\r\n### Library\r\n\r\nTo use JsonPath as a library simply include and get goin'!\r\n\r\n~~~~~ {ruby}\r\nrequire 'jsonpath'\r\n\r\njson = <<-HERE_DOC\r\n{\"store\":\r\n  {\"bicycle\":\r\n    {\"price\":19.95, \"color\":\"red\"},\r\n    \"book\":[\r\n      {\"price\":8.95, \"category\":\"reference\", \"title\":\"Sayings of the Century\", \"author\":\"Nigel Rees\"},\r\n      {\"price\":12.99, \"category\":\"fiction\", \"title\":\"Sword of Honour\", \"author\":\"Evelyn Waugh\"},\r\n      {\"price\":8.99, \"category\":\"fiction\", \"isbn\":\"0-553-21311-3\", \"title\":\"Moby Dick\", \"author\":\"Herman Melville\",\"color\":\"blue\"},\r\n      {\"price\":22.99, \"category\":\"fiction\", \"isbn\":\"0-395-19395-8\", \"title\":\"The Lord of the Rings\", \"author\":\"Tolkien\"}\r\n    ]\r\n  }\r\n}\r\nHERE_DOC\r\n~~~~~\r\n\r\nNow that we have a JSON object, let's get all the prices present in the object. We create an object for the path\r\nin the following way.\r\n\r\n~~~~~ {ruby}\r\npath = JsonPath.new('$..price')\r\n~~~~~\r\n\r\nNow that we have a path, let's apply it to the object above.\r\n\r\n~~~~~ {ruby}\r\npath.on(json)\r\n# => [19.95, 8.95, 12.99, 8.99, 22.99]\r\n~~~~~\r\n\r\nOr on some other object ...\r\n\r\n~~~~~ {ruby}\r\npath.on('{\"books\":[{\"title\":\"A Tale of Two Somethings\",\"price\":18.88}]}')\r\n# => [18.88]\r\n~~~~~\r\n\r\nYou can also just combine this into one mega-call with the convenient `JsonPath.on` method.\r\n\r\n~~~~~ {ruby}\r\nJsonPath.on(json, '$..author')\r\n# => [\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"Tolkien\"]\r\n~~~~~\r\n\r\nOf course the full JsonPath syntax is supported, such as array slices\r\n\r\n~~~~~ {ruby}\r\nJsonPath.new('$..book[::2]').on(json)\r\n# => [\r\n#      {\"price\"=>8.95, \"category\"=>\"reference\", \"author\"=>\"Nigel Rees\", \"title\"=>\"Sayings of the Century\"},\r\n#      {\"price\"=>8.99, \"category\"=>\"fiction\", \"author\"=>\"Herman Melville\", \"title\"=>\"Moby Dick\", \"isbn\"=>\"0-553-21311-3\"}\r\n#    ]\r\n~~~~~\r\n\r\n...and evals.\r\n\r\n~~~~~ {ruby}\r\nJsonPath.new('$..price[?(@ < 20)]').on(json)\r\n# => [8.95, 8.99]\r\n~~~~~\r\n\r\nThere is a convenience method, `#first` that gives you the first element for a JSON object and path.\r\n\r\n~~~~~ {ruby}\r\nJsonPath.new('$..color').first(object)\r\n# => \"red\"\r\n~~~~~\r\n\r\nAs well, we can directly create an `Enumerable` at any time using `#[]`. \r\n\r\n~~~~~ {ruby}\r\nenum = JsonPath.new('$..color')[object]\r\n# => #<JsonPath::Enumerable:...>\r\nenum.first\r\n# => \"red\"\r\nenum.any?{ |c| c == 'red' }\r\n# => true\r\n~~~~~\r\n\r\nYou can optionally prevent eval from being called on sub-expressions by passing in :allow_eval => false to the constructor.\r\n\r\n### Manipulation\r\n\r\nIf you'd like to do substitution in a json object, you can use `#gsub` or `#gsub!` to modify the object in place.\r\n\r\n~~~~~ {ruby}\r\nJsonPath.for('{\"candy\":\"lollipop\"}').gsub('$..candy') {|v| \"big turks\" }.to_hash\r\n~~~~~\r\n\r\nThe result will be\r\n\r\n~~~~~ {ruby}\r\n{'candy' => 'big turks'}\r\n~~~~~\r\n\r\nIf you'd like to remove all nil keys, you can use `#compact` and `#compact!`. To remove all keys under a certain path, use `#delete` or `#delete!`. You can even chain these methods together as follows:\r\n\r\n~~~~~ {ruby}\r\njson = '{\"candy\":\"lollipop\",\"noncandy\":null,\"other\":\"things\"}'\r\no = JsonPath.for(json).\r\n  gsub('$..candy') {|v| \"big turks\" }.\r\n  compact.\r\n  delete('$..other').\r\n  to_hash\r\n# => {\"candy\" => \"big turks\"}\r\n~~~~~","tagline":"Ruby implementation of http://goessner.net/articles/JsonPath/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}